{"version":3,"sources":["components/Navbar.js","components/SearchArea.js","components/Movie.js","components/MovieList.js","components/Pagination.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","id","SearchArea","handleChange","handleSubmit","onSubmit","placeholder","type","onChange","Movie","movie","setCurrentMovie","style","height","src","poster_path","fontSize","fontWeight","title","release_date","substring","split","concat","join","overview","MovieList","movies","MoviesCards","filter","map","i","key","Pagination","pagesNumbers","nextPgae","currentPage","onClick","API_KEY","App","e","setState","searchTerm","target","value","preventDefault","state","fetch","then","response","json","data","results","totalResults","total_results","catch","console","log","alert","pageNumber","movieOn","currentMovie","this","Math","ceil","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.75726074.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = ()=>{\r\n\treturn (\r\n\t\t<nav>\r\n\t\t    <div className=\"nav-wrapper container\">\r\n\t\t      <a href=\"#\" className=\"logo\">Movie Finder</a>\r\n\t\t      <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n\t\t        <li><a href=\"sass.html\">Sass</a></li>\r\n\t\t        <li><a href=\"badges.html\">Components</a></li>\r\n\t\t        <li><a href=\"collapsible.html\">JavaScript</a></li>\r\n\t\t      </ul>\r\n\t\t    </div>\r\n  \t\t</nav>\r\n\t)\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\nconst SearchArea = ({handleChange,handleSubmit})=>{\r\n\treturn (\r\n\t\t<div className='container row'>\r\n\t\t\t\t<div className='col s4 offset-s4'>\r\n\t\t\t\t\t<form onSubmit={handleSubmit}>\r\n\t\t\t\t\t\t<input placeholder=\"Search a movie\" type=\"search\" className=\"search-movie center\" \r\n\t\t\t\t\t\tonChange={handleChange}/>\r\n\t\t\t\t\t</form>\r\n\t\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default SearchArea;","import React ,{Component} from 'react';\r\n\r\nconst Movie = ({movie,setCurrentMovie})=>{\r\n\treturn(\r\n\t\t\t<div className=\"card col m4 s6\">\r\n\t\t\t    <div className=\"card-image waves-effect waves-block waves-light\">\r\n\t\t    \t\t<img className=\"activator\" style={{height:300}} src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}/>\r\n\t\t\t    </div>\r\n\t\t\t    <div className=\"card-content\">\r\n\t\t\t      <span className=\"card-title activator grey-text text-darken-4\" style={{fontSize:16,fontWeight: 400}}>{movie.title}<i className=\"material-icons right\">more_vert</i></span>\r\n\t\t\t    </div>\r\n\t\t\t    <div className=\"card-reveal\">\r\n\t\t\t      <span className=\"card-title grey-text text-darken-4\">{movie.title}<i className=\"material-icons right\">close</i></span>\r\n\t\t\t      <p>release_date : {movie.release_date.substring(5).split('-').concat(movie.release_date.substring(0,4)).join('/')}</p>\r\n\t\t\t      <p>overview : {movie.overview}</p>\r\n\t\t\t    </div>\r\n  \t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Movie;","import React ,{Component} from 'react';\r\nimport Movie from './Movie'\r\n\r\nconst MovieList = ({movies, setCurrentMovie})=>{\r\n\tconst MoviesCards = movies.filter(movie=>movie.poster_path !== null)\r\n\t\t\t\t\t\t\t.map((movie,i)=> <Movie key={i} movie={movie} \r\n\t\t\t\t\t\t\t\t\t\t\tsetCurrentMovie={setCurrentMovie}/>) \r\n\treturn(\r\n\t\t<div className='container row'>\r\n\t\t\t{MoviesCards}\r\n\t\t</div>\r\n\t)\r\n}\r\nexport default MovieList;","import React from 'react';\r\n\r\nconst Pagination = ({pagesNumbers, nextPgae, currentPage})=>{\r\n\t/*const pagesLinks = []\r\n\tfor (let i = 1; i < pagesNumbers+1; i++) {\r\n\t\tlet active = currentPage == i ? 'active' : ''\r\n\t\tpagesLinks.push(<li className={`waves-effect ${active}`} key={i} onClick={()=>nextPgae(i)}><a href=\"#!\">{i}</a></li>)\r\n\t}*/\r\n\treturn(\r\n\t\t<ul className=\"pagination container row\">\r\n\t\t\t<li className={currentPage>1 ? \"waves-effect\" : \"disabled\"} onClick={()=>nextPgae(currentPage-1)}><a href=\"#!\"><i className=\"material-icons\">chevron_left</i></a></li>\r\n\t\t\t<li>{currentPage}/{pagesNumbers}</li>    \t\r\n\t\t    <li className={currentPage<pagesNumbers ? \"waves-effect\" : \"disabled\"} onClick={()=>nextPgae(currentPage+1)}><a href=\"#!\"><i className=\"material-icons\">chevron_right</i></a></li>\t\r\n\t  \t</ul>\r\n\t)\r\n}\r\nexport default Pagination;","export const API_KEY = 'd3302b3a2fdee5276fbb296edd58ffb8'","import React ,{Component} from 'react';\nimport Navbar from './components/Navbar'\nimport SearchArea from './components/SearchArea'\nimport MovieList from './components/MovieList'\nimport Pagination from './components/Pagination'\nimport {API_KEY} from './constants'\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    this.state = {\n      movies : [],\n      searchTerm : '',\n      currentPage : 1,\n      totalResults : 0,\n      currentMovie : null\n    }\n  }\n\n  //--FUNCTIONS---------------\n  handleChange = (e)=>{\n    this.setState({searchTerm : e.target.value})\n  }\n  handleSubmit = (e)=>{\n    e.preventDefault()\n    const {searchTerm} = this.state\n    if (searchTerm) {\n        fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchTerm}`)\n        .then(response=>response.json())\n        .then( data=> {\n          this.setState({\n                  movies : [...data.results], \n                  totalResults : data.total_results,\n                  currentPage : 1\n                })\n        } ).catch((e)=>{console.log(e)});  \n    }else{\n      alert('please enter a movie title')\n    }\n  }\n  nextPgae = (pageNumber)=>{\n    const {searchTerm} = this.state\n    fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&query=${searchTerm}&page=${pageNumber}`)\n        .then(response=>response.json())\n        .then( data=> {\n          console.log('nextPgae FUNCTIONS')\n          this.setState({movies : [...data.results], currentPage : pageNumber})\n        } ).catch((e)=>{console.log(e)});\n  }\n  setCurrentMovie = (id)=>{\n    const movieOn = this.state.movies.filter(movie=>movie.id === id)\n    console.log(\"ooooooooo\",movieOn[0])\n    this.setState({currentMovie : movieOn[0]})\n  }\n\n\n\n  //---RENDER()---------------\n  render()\n  {\n    const {movies,totalResults,currentPage} = this.state\n    const pagesNumbers = Math.ceil( totalResults/20 )\n\n      return (\n        <div className=\"App\">\n            <Navbar />\n            <SearchArea handleChange={this.handleChange} handleSubmit={this.handleSubmit}/>\n            <MovieList movies={movies} setCurrentMovie={this.setCurrentMovie}/>\n            {totalResults > 20 ? <Pagination pagesNumbers={pagesNumbers} nextPgae={this.nextPgae} currentPage={currentPage}/> : ''}\n        </div>\n    );  \n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}